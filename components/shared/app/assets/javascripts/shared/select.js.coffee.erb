#= require ./lib/module

class window.Select extends Module
  $.fn.modal.Constructor.prototype.enforceFocus = () -> true
  if <%= Rails.module.university? %>
    base_url = '<%= Rails.application.config.relative_url_root %>'
  else
    current_url = window.location.pathname
    context_pattern = ///<%= Regexp.escape Rails.application.config.relative_url_root.to_s %>\/[^\/]*///i
    base_url = current_url.match context_pattern

  @of: (name, options = {}) ->
    options.bind ?= false

    new Select(name, options)

  defaults:
    formatSearching: ->
      "<span>#{I18n.t('question.tag.searching')}</span>"
    formatNoMatches: ->
      "<span>#{I18n.t('question.tag.no_matches')}</span>"
    tokenizer: (input, selection, callback, options) ->
      tokenizer = /,/

      if tokenizer.test(input)
        value = input.replace(tokenizer, '')

        return callback(id: value, text: value) if value.length > 0

      result = "#{input}".toLowerCase()
      result = result.replace(/[\s\,\;\`\!\@\#\$\%\^\&\*\(\)\_\+\-\=\[\]\'\\\.\/\{\}\:\"\|\<\>\?]+/gm, '-')
      result = result.replace(/^-/, '')
  roles:
    tags:
      tags: true
      multiple: true
      tokenSeparators: [' ', ',', ';']
      initSelection: (element, callback) ->
        values = $(element).val().split(',').map (e) -> { id: e, text: e }

        callback(values)
      formatSelection: (item) -> item.id
      createSearchChoice : (term, data) -> { id: term, text: "#{term} (#{I18n.t('question.tag.new')})" }
      ajax:
        url: base_url + '/tags/suggest'
        dataType: 'json'
        data: (term, page) ->
          q: term
          page: page - 1
        results: (data, page) ->
          data
    categories_with_metadata:
      formatResult: (category) ->
        originalOption = category.element
        markup = '<span>' + category.text + ' '
        markup += $(originalOption).data('icon') if (typeof $(originalOption).data('icon') != 'undefined')
        markup += '</span>'
      formatSelection: (category) ->
        originalOption = category.element
        markup = '<span>' + category.text + ' '
        markup += $(originalOption).data('icon') if (typeof $(originalOption).data('icon') != 'undefined')
        markup += '</span>'
      matcher: (term, text, option) ->
        removeDiacritics(text.toLowerCase()).indexOf(removeDiacritics(term.toLowerCase()))>=0 || removeDiacritics($(option).data("description").toLowerCase()).indexOf(removeDiacritics(term.toLowerCase()))>=0

    filter:
      createSearchChoice: (term, data) -> return if data.length == 0

  constructor: (selector, options = {}) ->
    @selector = selector ?= '[data-as=select2]'

    @.bind() if options.bind ?= true

    @

  each: (callback) ->
    $(@selector).each (index, element) ->
      callback(index, element)

  bind: ->
    @.each (i, element) =>
      role    = $(element).attr('data-role')
      options = @.options_for role

      $(element).select2 options

      $(element).on 'change', -> $(this).select2('focus')

  on: (event, callback) ->
    $(@selector).on(event, callback)

  attr: (name) ->
    $(@selector).attr(name)

  addItem: (item) ->
    @addItem [item]

  addItems: (others) ->
    @.each (i, element) =>
      items = $(element).select2('data')

      for item in others
        item = { id: item, text: item } unless typeof(item) == 'object'

        items.push(item)

      $(element).select2('data', items)
      $(element).trigger('change')

  options_for: (role) ->
    options = @defaults

    if role
      for role in role.split(',')
        options = $.extend({}, options, @roles[role])

    options
